//Xiao Sun, Austin Loza, Oct 20, 2016
//
// FILE: graph.template (part of the namespace main_savitch_15)
// TEMPLATE CLASS IMPLEMENTED: graph<Item> (See graph.h for documentation.)
// This file is included in the header file and not compiled separately.
// INVARIANT for the graph class:
//   1. The number of vertices in the graph is stored in the member variable
//      many_vertices.
//   1. These vertices are numbered from 0 to many_vertices-1.
//   2. edges is the adjacency matrix for the graph (with true in edges[i][j]
//      to indicate an edge from vertex i to vertex j).
//   3. For each i < many_vertices, labels[i] is the label of vertex i.

#include <cassert>    // Provides assert
#include <cstdlib>    // Provides size_t
#include <set>        // Provides set
//#include "graph.h"

namespace main_savitch_15
{
    template <class Item>
    graph<Item>::graph(){
        
        edges = new bool*[10];
        for (std::size_t i=0; i < 10; i++)
            edges[i]=new bool[10];
        labels=new Item[10];
        many_vertices=0;
        allocated=10;
        
    
    }
    
    template <class Item>
    graph<Item>::graph(std::size_t initial_allocation){
        
        
        edges = new bool*[initial_allocation];
        for (std::size_t i=0; i<initial_allocation;i++)
            edges[i]=new bool[initial_allocation];
        
        
        
        labels=new Item[initial_allocation];
        allocated=initial_allocation;
        many_vertices=0;
        
    }
    
    //copy
    template <class Item>
    graph<Item>::graph(const graph &source){
        labels=new Item[source.allocated];
        edges = new bool*[source.allocated];
        for(std::size_t i=0; i < source.allocated;i++){
            edges[i]=new bool[source.allocated];
        }
        for(std::size_t i=0; i<source.many_vertices;i++){
            for(std::size_t j=0; j < source.many_vertices;j++)
                edges[i][j]=source.edges[i][j];
        }
        for(std::size_t i=0; i < source.allocated;i++){
            labels[i]=source.labels[i];
        }
        
        allocated= source.allocated;
        many_vertices=source.many_vertices;
    }
   
    template <class Item>
    graph<Item>::~graph(){
        for(std::size_t i=0; i < allocated;i++){
            delete []edges[i];
        }
        delete []edges;
        delete []labels;
    }
    
    
    template <class Item>
    void graph<Item>::resize(std::size_t new_allocation){
        if (new_allocation>=allocated){
            bool **new_edges=new bool*[new_allocation];
            Item *new_labels = new Item [new_allocation];
         
            for (std::size_t i=0;i<new_allocation;i++){
                new_edges[i]=new bool[new_allocation];
                
            }
         
            for(std::size_t i=0; i<many_vertices;i++)
                for(std::size_t j=0;j<many_vertices;j++)
                    new_edges[i][j]=edges[i][j];
         
            for(int i=0; i<many_vertices;i++)
                new_labels[i]=labels[i];
            
            delete [] labels;
            
            for(std::size_t i=0;i<allocated;++i)
                delete [] edges[i];
            delete [] edges;
            
            
            edges=new_edges;
            labels=new_labels;
            allocated=new_allocation;
        }
        
    }
    
    template <class Item>
    graph<Item>& graph<Item>::operator=(const graph &source){

        if(&source==this)
            return *this;

        else{
        labels=new Item[source.allocated];
        edges=new bool*[source.allocated];


        
        for(std::size_t i=0; i <source.allocated; ++i)
            edges[i]=new bool[source.allocated];
        
        for(std::size_t i=0; i <source.many_vertices; ++i)
            for(std::size_t j=0; j <source.many_vertices; ++j)
                edges[i][j]=source.edges[i][j];

        for(std::size_t i=0; i < source.allocated;i++){
            labels[i]=source.labels[i];
        }

        many_vertices=source.many_vertices;
        allocated=source.allocated;
        
        }
        return *this;
        
    }

    
    
    
    
    
    
    template <class Item>
    void graph<Item>::add_edge(std::size_t source, std::size_t target)
    // Library facilities used: cassert, cstdlib
    {
        //assert(source < size( ));
        //assert(target < size( ));
        edges[source][target] = true;
    }


    
    template <class Item>
    void graph<Item>::add_vertex(const Item& label)
    // Library facilities used: cassert, cstdlib
    {
        std::size_t new_vertex_number;
        std::size_t other_number;
        
        
       
        if(!(many_vertices < allocated)){
            resize(2*allocated);
        }

        new_vertex_number = many_vertices;
        ++many_vertices;
        
        
        for (other_number = 0; other_number < many_vertices; ++other_number)
        {
            edges[other_number][new_vertex_number] = false;
            edges[new_vertex_number][other_number] = false;
        }
        labels[new_vertex_number] = label;
    }




    
    template <class Item>
    bool graph<Item>::is_edge(std::size_t source, std::size_t target) const
    // Library facilities used: cassert, cstdlib
    {
        //assert(source < size( ));
        //assert(target < size( ));
        return edges[source][target];
    }
    
    template <class Item>
    Item& graph<Item>::operator[ ] (std::size_t vertex)
    // Library facilities used: cassert, cstdlib
    {
        //assert(vertex < size( ));
        return labels[vertex];     // Returns a reference to the label
    }
    
    template <class Item>
    Item graph<Item>::operator[ ] (std::size_t vertex) const
    // Library facilities used: cassert, cstdlib
    {
        //assert(vertex < size( ));
        return labels[vertex];     // Returns only a copy of the label
    }
    
    template <class Item>
    std::set<std::size_t> graph<Item>::neighbors(std::size_t vertex) const
    // Library facilities used: cassert, cstdlib, set
    {
        std::set<std::size_t> answer;
        std::size_t i;
        
        assert(vertex < size( ));
        
        for (i = 0; i < size( ); i++)
        {
            if (edges[vertex][i])
                answer.insert(i);
        }
        return answer;
    }
    
    template <class Item>
    void graph<Item>::remove_edge(std::size_t source, std::size_t target)
    // Library facilities used: cassert, cstdlib
    {
        //assert(source < size( ));
        //assert(target < size( ));
        edges[source][target] = false;
    }
    
    

    

}

